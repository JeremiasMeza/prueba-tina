name: Deploy Front + Tina (/admin) via SSH

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  NODE_VERSION: 20

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: corepack enable

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # 👇 Construye TODO con tus secrets de Tina
      - name: Build (pnpm build: astro + tina)
        env:
          TINA_CLIENT_ID: ${{ secrets.TINA_CLIENT_ID }}
          TINA_TOKEN: ${{ secrets.TINA_TOKEN }}
          TINA_BRANCH: ${{ secrets.TINA_BRANCH || 'main' }}
        run: pnpm build

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Create release dir on server
        run: |
          ssh -i ~/.ssh/deploy_key -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "mkdir -p ~/deploy/incoming ~/deploy/releases"

      # Empaquetamos SOLO el contenido de dist/ y admin/
      - name: Tar dist and admin
        run: |
          test -d dist || { echo "❌ No existe dist/. Revisa el build"; exit 1; }
          # admin es el outputFolder de tina (por defecto 'admin')
          if [ -d admin ]; then
            HAVE_ADMIN=1
          else
            echo "ℹ️ No se encontró carpeta admin/. (¿tina/config.ts build.outputFolder distinto?)"
            HAVE_ADMIN=0
          fi
          TS="$(date -u +%Y%m%d%H%M%S)"; echo "TS=$TS" >> $GITHUB_ENV
          tar -czf "front-${TS}.tar.gz" -C dist .
          if [ "$HAVE_ADMIN" = "1" ]; then
            tar -czf "admin-${TS}.tar.gz" -C admin .
          fi
          echo "HAVE_ADMIN=$HAVE_ADMIN" >> $GITHUB_ENV

      - name: Upload tars
        run: |
          scp -i ~/.ssh/deploy_key -P "${{ secrets.SSH_PORT }}" "front-${TS}.tar.gz" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/deploy/incoming/"
          if [ "${{ env.HAVE_ADMIN }}" = "1" ]; then
            scp -i ~/.ssh/deploy_key -P "${{ secrets.SSH_PORT }}" "admin-${TS}.tar.gz" \
              "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/deploy/incoming/"
          fi

      - name: Deploy to DOCROOT
        run: |
          ssh -i ~/.ssh/deploy_key -p "${{ secrets.SSH_PORT }}" \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" bash -lc "
              set -euo pipefail
              DOCROOT='${{ secrets.SSH_DOCROOT }}'
              TS='${{ env.TS }}'
              mkdir -p ~/deploy/releases/\$TS/front ~/deploy/releases/\$TS/admin

              # Front (dist/)
              tar -xzf ~/deploy/incoming/front-\$TS.tar.gz -C ~/deploy/releases/\$TS/front
              rsync -az --delete ~/deploy/releases/\$TS/front/ \"\$DOCROOT\"/

              # CMS (/admin) si existe
              if [ -f ~/deploy/incoming/admin-\$TS.tar.gz ]; then
                tar -xzf ~/deploy/incoming/admin-\$TS.tar.gz -C ~/deploy/releases/\$TS/admin
                mkdir -p \"\$DOCROOT\"/admin
                rsync -az --delete ~/deploy/releases/\$TS/admin/ \"\$DOCROOT\"/admin/
              fi

              # .htaccess básico
              HT=\"\$DOCROOT/.htaccess\"
              touch \"\$HT\"
              grep -q \"Options -Indexes\" \"\$HT\" || echo \"Options -Indexes\" >> \"\$HT\"
              grep -q \"DirectoryIndex\" \"\$HT\" || echo \"DirectoryIndex index.html index.php\" >> \"\$HT\"
            "